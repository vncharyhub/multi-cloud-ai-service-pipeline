AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Multi-Cloud AI Service Pipeline

Parameters:
  GitHubRepo:
    Type: String
    Default: vncharyhub/multi-cloud-ai-service-pipeline
  GitHubBranch:
    Type: String
    Default: master
  GitHubSecretId:
    Type: String
    Default: Assessment_AWS
  GitHubSecretKey:
    Type: String
    Default: Assessment_AWS

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaAIInvokeRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaSecretsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: MultiCloudAIHandler
      CodeUri: s3://genpactassessment/function.zip
      Handler: handler.lambda_handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SECRET_NAME: !Ref GitHubSecretId
          GITHUB_TOKEN_KEY: !Ref GitHubSecretKey
      Events:
        ApiInvoke:
          Type: HttpApi
          Properties:
            Path: /invoke
            Method: POST

  ApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: MultiCloudAIHttpAPI

  PipelineArtifactBucket:
    Type: AWS::S3::Bucket

  PipelineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodePipelineExecRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - cloudformation:*
                  - iam:PassRole
                  - lambda:*
                  - apigateway:*
                  - secretsmanager:GetSecretValue
                Resource: '*'

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineExecutionRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                Owner: !Select [0, !Split ["/", !Ref GitHubRepo]]
                Repo: !Select [1, !Split ["/", !Ref GitHubRepo]]
                Branch: !Ref GitHubBranch
                OAuthToken: !Sub '{{resolve:secretsmanager:${GitHubSecretId}:SecretString:${GitHubSecretKey}}}'
              RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: DeployStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              InputArtifacts:
                - Name: SourceArtifact
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: MultiCloudAIStack
                TemplatePath: SourceArtifact::template.yaml
                Capabilities: CAPABILITY_NAMED_IAM
              RunOrder: 1
