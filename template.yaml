AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Multi-Cloud AI Service Pipeline

Parameters:
  GitHubRepo:
    Type: String
    Description: GitHub repository name (e.g., user/repo)
  GitHubBranch:
    Type: String
    Default: master
  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub Personal Access Token (stored in Secrets Manager)

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - secretsmanager:GetSecretValue
                Resource: "*"

  BedrockSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: bedrock-api-key
      Description: API key for Amazon Bedrock
      SecretString: '{"api_key": "dummy-bedrock-api-key"}'

  AzureSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: azure-api-key
      Description: API key for Azure OpenAI
      SecretString: '{"api_key": "dummy-azure-api-key"}'

  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: MultiCloudAIHandler
      Handler: handler.lambda_handler
      Runtime: python3.11
      CodeUri: lambda/
      MemorySize: 256
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          BEDROCK_SECRET_NAME: !Ref BedrockSecret
          AZURE_SECRET_NAME: !Ref AzureSecret

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: MultiCloudAIHttpApi

  LambdaApiIntegration:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Name: MultiCloudAIAPI
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: "MultiCloudAI"
          version: "1.0"
        paths:
          /invoke:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
              responses: {}

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodePipelineServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:*
                  - cloudformation:*
                  - s3:*
                  - iam:PassRole
                Resource: "*"

  PipelineArtifactBucket:
    Type: AWS::S3::Bucket

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: MultiCloudAIBuild
      Source:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:6.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CodePipelineRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      TimeoutInMinutes: 5
      BuildSpec: buildspec.yml

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: MultiCloudAIPipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Select [0, !Split ["/", !Ref GitHubRepo]]
                Repo: !Select [1, !Split ["/", !Ref GitHubRepo]]
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: MultiCloudAIStack
                TemplatePath: BuildOutput::template.yaml
              RunOrder: 1
